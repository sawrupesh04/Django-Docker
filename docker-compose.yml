version: '3.7'

services:
  web:
    build: ./app
    command: python /usr/src/app/manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app/:/usr/src/app/
    ports:
      - 8000:8000
    environment:
      - SECRET_KEY='7euwp-iq(yoo7*oimx40vt*!c%3_$a6c!ujemq%3vmm$j$e506'
      - SQL_ENGINE=django.db.backends.postgresql
      - SQL_DATABASE=postgres
      - SQL_USER=postgres
      - SQL_PASSWORD=postgres
      - SQL_HOST=db
      - SQL_PORT=5432
      - C_FORCE_ROOT=true
    links:
      - rabbit
    depends_on:
      - db
      - redis
      - rabbit
 #     - mosquitto


# postgres

  db:
    container_name: 'postgres_test'
    image: postgres:10.5-alpine
    volumes:
      - 'postgres_data:/var/lib/postgresql/data/'

# redis

  redis:
    restart: always
    container_name: 'redis_test'
    image: redis:latest
    ports:
      - '6379:6379'
    volumes:
      - 'redis_data:/data'


# rabbit


  rabbit:
    container_name: rabbit
    #image: rabbitmq:3.6-management
    build: ./rabbitmq
    ports:
      - '15672:15672'
      - '5672:5672'
      - '1883:1883'
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    #environment:
    #  - RABBITMQ_DEFAULT_USER=admin
    #  - RABBITMQ_DEFAULT_PASS=mypass
    #hostname: rabbit1
    #xposing RabbitMQ web management on different port for convenience
    restart: always

  #rabbit:
  #  container_name: rabbit
    #image: rabbitmq:3.6-management
   # build: ./rabbitmq
    #environment:
    #  - RABBITMQ_DEFAULT_USER=admin
    #  - RABBITMQ_DEFAULT_PASS=mypass
   # hostname: rabbit1
    ##ports:
     # - '15673:15672' # Exposing RabbitMQ web management on different port for convenience
     # - '1883:1883'
     # - '5672:5672'
    #restart: always
  rpi_docker_ui:
    image: portainer/portainer
    ports:
      - "80:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped



volumes:
  postgres_data:
  redis_data:
  portainer_data:
  rabbit_data: